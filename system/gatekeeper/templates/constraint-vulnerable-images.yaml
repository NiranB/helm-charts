##############################################################################
# WARNING: This policy is a vital piece of the garbage collection process in #
# our internal Keppel repositories. Since this policy regularly polls every  #
# image that is used by live containers, we can rely on the "last_pulled_at" #
# timestamps of images in active use to never get too old for GC to kick in. #
##############################################################################

apiVersion: templates.gatekeeper.sh/v1beta1
kind: ConstraintTemplate
metadata:
  name: gkvulnerableimages
spec:
  crd:
    spec:
      names:
        kind: GkVulnerableImages
      validation:
        openAPIV3Schema:
          properties: {}

  targets:
    - target: admission.k8s.gatekeeper.sh
      rego: |
        package vulnerableimages

        violation[{"msg": msg}] {
          # check each pod container
          obj := input.review.object
          obj.kind == "Pod"
          container := obj.spec.containers[_]

          # only consider images stored in Keppel since we want to inspect the X-Keppel-Vulnerability-Status header
          regex.match("^keppel", container.image)

          # query vulnerability status through helper API
          url := sprintf("http://doop-vuln-checker.kube-system.svc/v1?image=%s", [container.image])
          resp := http.send({ "url": url, "method": "GET", "timeout": "10s" })
          resp.status_code == 200
          status := trim_space(resp.raw_body)

          # report everything with a definite vulnerability
          status != "Clean"
          status != "Unknown"
          msg := sprintf("image %s for container %q has vulnerability status %q", [container.image, container.name, status])
        }
